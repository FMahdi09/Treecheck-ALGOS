f�r einlesen aus datei:
    int counter = 0;
    gehe durch und schaue wie viele eintr�ge und erh�he counter um 1;
    if (counter = 1){
        rufe searchRecursive();
    }else {
    searchRecursiveTree();}





Node * searchRecursive(Node* root, int val_to_find)
  {
    if(root == NULL) // NULL encountered (node not found)
    {
      cout << val_to_find << " was Not Found!" << endl ;
      return root;
    }

    if(root->value == val_to_find) // node found
    {
      cout << val_to_find << " was Found!" << endl ;
      return root;
    }
    else
    {
      if(val_to_find > root->value) // search in right subtree
      {
        return searchRecursive(root->right_child, val_to_find) ;
      }
      else if(val_to_find < root->value) // search in left subtree
      {
        return searchRecursive(root->left_child, val_to_find) ;
      }
    }
  }

  bool isSubtree(AVLNode* root, AVLNode* subtreeRoot) {
    if (root == nullptr) {
        return false;
    }
    bool found = isSubtree(root->left, subtreeRoot) || isSubtree(root->right, subtreeRoot);
    if (found) {
        return true;
    }
    if (root->key == subtreeRoot->key) {
        // found a potential subtree root, check if the subtrees match
        return compareSubtree(root, subtreeRoot);
    }
    return false;
}

bool compareSubtree(AVLNode* node1, AVLNode* node2) {
    if (node1 == nullptr && node2 == nullptr) {
        return true;
    }
    if (node1 == nullptr || node2 == nullptr) {
        return false;
    }
    if (node1->key != node2->key) {
        return false;
    }
    return compareSubtree(node1->left, node2->left) && compareSubtree(node1->right, node2->right);
}


